{"mappings":"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","sources":["<anon>","src/ts/index.ts","src/ts/Board.ts","src/ts/Elements.ts","src/ts/Game.ts","src/ts/Policies.ts","src/ts/Player.ts"],"sourcesContent":["function $0407224c6b4a60f1$export$2e2bcd8739ae039() {\n    const gameBoard = [\n        \"empty\",\n        \"empty\",\n        \"empty\",\n        \"empty\",\n        \"empty\",\n        \"empty\",\n        \"empty\",\n        \"empty\",\n        \"empty\"\n    ];\n    const getCell = (index)=>{\n        return document.querySelector(`.cell[data-cell-index='${index}']`);\n    };\n    const isFilled = ()=>!gameBoard.includes(\"empty\");\n    const drawBoard = ()=>{\n        gameBoard.forEach((marking, index)=>{\n            if (marking === \"o\") getCell(index).classList.add(\"o\");\n            else if (marking === \"x\") getCell(index).classList.add(\"x\");\n            else if (marking === \"empty\") {\n                getCell(index).classList.remove(\"x\");\n                getCell(index).classList.remove(\"o\");\n            }\n        });\n    };\n    const isWinner = (symbol)=>{\n        const check = (index)=>gameBoard[index] === symbol;\n        const firstColCheck = check(0) && check(3) && check(6);\n        const secondColCheck = check(1) && check(4) && check(7);\n        const thirdColCheck = check(2) && check(5) && check(8);\n        const firstRowCheck = check(0) && check(1) && check(2);\n        const secondRowCheck = check(3) && check(4) && check(5);\n        const thirdRowCheck = check(6) && check(7) && check(8);\n        const firstDiagCheck = check(0) && check(4) && check(8);\n        const secondDiagCheck = check(2) && check(4) && check(6);\n        return firstColCheck || secondColCheck || thirdColCheck || firstRowCheck || secondRowCheck || thirdRowCheck || firstDiagCheck || secondDiagCheck;\n    };\n    let lastEditedIndex = null;\n    const getLastEditedIndex = ()=>lastEditedIndex;\n    const editBoard = (index, symbol)=>{\n        gameBoard[index] = symbol;\n        lastEditedIndex = index;\n        drawBoard();\n    };\n    const reset = ()=>{\n        gameBoard.fill(\"empty\");\n        drawBoard();\n    };\n    return {\n        isWinner: isWinner,\n        isFilled: isFilled,\n        editBoard: editBoard,\n        reset: reset,\n        getLastEditedIndex: getLastEditedIndex,\n        gameBoard: gameBoard\n    };\n}\n\n\nfunction $ea6e99e5431089c0$var$querySelectorWithError(query) {\n    const queryResult = document.querySelectorAll(query);\n    if (queryResult.length > 1) throw new Error(\"Multiple elements detected\");\n    if (queryResult.length < 1) throw new Error(\"No elements detected, is the js file deferred?\");\n    return queryResult[0];\n}\nconst $ea6e99e5431089c0$export$1324d9a85915ed99 = $ea6e99e5431089c0$var$querySelectorWithError(\"#game-elements\");\nconst $ea6e99e5431089c0$export$82e711826dc223fa = $ea6e99e5431089c0$var$querySelectorWithError(\"#winner-text\");\nconst $ea6e99e5431089c0$export$ee83f511b7056644 = $ea6e99e5431089c0$var$querySelectorWithError(\"#start-game\");\nconst $ea6e99e5431089c0$export$ee3b447756b3ac63 = $ea6e99e5431089c0$var$querySelectorWithError(\"#current-player-turn\");\n\n\n\n// @ts-ignore\nfunction $8f46985b0731233e$var$Policy(state, value, possibleMoves) {\n    return {\n        state: state,\n        value: value,\n        possibleMoves: possibleMoves\n    };\n}\nfunction $8f46985b0731233e$export$699d67b383801fd() {\n    const initialPolicy = $8f46985b0731233e$var$Policy($8f46985b0731233e$var$createEmptyBoardState(), 0, []);\n    function addPolicy(turnSymbol, policy) {\n        const newPolicyState = createCopy(policy.state);\n        for(let i = 0; i < 9; i++)if (policy.state[i] === \"empty\") {\n            newPolicyState[i] = turnSymbol;\n            const newPolicy = $8f46985b0731233e$var$Policy(createCopy(newPolicyState), 0, []);\n            const xWinning = isWinner(newPolicyState, \"x\");\n            const oWinning = isWinner(newPolicyState, \"o\");\n            if (xWinning) newPolicy.value = 1;\n            else if (oWinning) newPolicy.value = 0;\n            else newPolicy.value = 0.5;\n            policy.possibleMoves.push(newPolicy);\n            const notAWinner = !(xWinning || oWinning);\n            if (notAWinner) addPolicy(turnSymbol === \"x\" ? \"o\" : \"x\", newPolicy);\n            newPolicyState[i] = \"empty\";\n        } else policy.possibleMoves.push(null);\n    }\n    addPolicy(\"o\", initialPolicy);\n    return initialPolicy;\n    function createCopy(boardState) {\n        return [\n            boardState[0],\n            boardState[1],\n            boardState[2],\n            boardState[3],\n            boardState[4],\n            boardState[5],\n            boardState[6],\n            boardState[7],\n            boardState[8]\n        ];\n    }\n    function isWinner(boardState, symbol) {\n        const check = (i)=>boardState[i] === symbol;\n        const firstColCheck = check(0) && check(3) && check(6);\n        const secondColCheck = check(1) && check(4) && check(7);\n        const thirdColCheck = check(2) && check(5) && check(8);\n        const firstRowCheck = check(0) && check(1) && check(2);\n        const secondRowCheck = check(3) && check(4) && check(5);\n        const thirdRowCheck = check(6) && check(7) && check(8);\n        const firstDiagCheck = check(0) && check(4) && check(8);\n        const secondDiagCheck = check(2) && check(4) && check(6);\n        return firstColCheck || secondColCheck || thirdColCheck || firstRowCheck || secondRowCheck || thirdRowCheck || firstDiagCheck || secondDiagCheck;\n    }\n}\nfunction $8f46985b0731233e$var$createEmptyBoardState() {\n    return [\n        \"empty\",\n        \"empty\",\n        \"empty\",\n        \"empty\",\n        \"empty\",\n        \"empty\",\n        \"empty\",\n        \"empty\",\n        \"empty\"\n    ];\n}\n\n\nfunction $48f6c7b0f9ee5bd6$export$2e2bcd8739ae039(oPlayer, xPlayer, board) {\n    const isGameDone = ()=>board.isWinner(oPlayer.symbol) || board.isWinner(xPlayer.symbol) || board.isFilled();\n    async function playerTurn(player, policy) {\n        (0, $ea6e99e5431089c0$export$ee3b447756b3ac63).textContent = `It's your turn, ${player.name}`;\n        await player.startTurn(policy, board);\n        (0, $ea6e99e5431089c0$export$ee3b447756b3ac63).textContent = \"\";\n    }\n    let originalPolicy = (0, $8f46985b0731233e$export$699d67b383801fd)();\n    // reino is x player\n    const start = async ()=>{\n        let currentPolicy = originalPolicy;\n        while(true){\n            await playerTurn(oPlayer, currentPolicy);\n            let previousPolicy = currentPolicy;\n            currentPolicy = currentPolicy.possibleMoves[board.getLastEditedIndex()];\n            updatePolicy(currentPolicy, previousPolicy);\n            if (isGameDone()) break;\n            await playerTurn(xPlayer, currentPolicy);\n            previousPolicy = currentPolicy;\n            currentPolicy = currentPolicy.possibleMoves[board.getLastEditedIndex()];\n            updatePolicy(currentPolicy, previousPolicy);\n            if (isGameDone()) break;\n        }\n        (0, $ea6e99e5431089c0$export$82e711826dc223fa).style.display = \"block\";\n        if (board.isWinner(oPlayer.symbol)) (0, $ea6e99e5431089c0$export$82e711826dc223fa).innerHTML = `${oPlayer.name} has won`;\n        else if (board.isWinner(xPlayer.symbol)) (0, $ea6e99e5431089c0$export$82e711826dc223fa).innerHTML = `${xPlayer.name} has won`;\n        else if (board.isFilled()) (0, $ea6e99e5431089c0$export$82e711826dc223fa).innerHTML = \"TIE!\";\n        document.querySelector(\"#start-game\").style.opacity = \"1\";\n    };\n    return {\n        start: start\n    };\n    // equation on page 10 of rl by barto and sutton second edition: V(S_t) <- V(S_t) + a[V(S_t+1) - V(S_t)]\n    function updatePolicy(currentPolicy, previousPolicy) {\n        const stepSizeParameter = 1;\n        previousPolicy.value = previousPolicy.value + stepSizeParameter * (currentPolicy.value - previousPolicy.value);\n    }\n}\n\n\nfunction $b1962aabaad09aa2$export$2e2bcd8739ae039(isAi, symbol, name, board) {\n    const getEmptyCellArray = ()=>[\n            ...document.querySelectorAll(\".cell:not(.x):not(.o)\")\n        ];\n    const getAllCellsArray = ()=>[\n            ...document.querySelectorAll(\".cell\")\n        ];\n    function addClickEventToEmptyCells(clickEvent) {\n        getEmptyCellArray().forEach((cell)=>{\n            cell.addEventListener(\"click\", clickEvent);\n        });\n    }\n    function removeClickEventFromCells(clickEvent) {\n        getAllCellsArray().forEach((e)=>e.removeEventListener(\"click\", clickEvent));\n    }\n    const startTurn = async (policy, board)=>{\n        return new Promise((resolve)=>{\n            addClickEventToEmptyCells(handleCellClick);\n            if (isAi) {\n                const allCellArray = getAllCellsArray();\n                const possibleNextMoves = policy.possibleMoves;\n                let indexOfHighestValueMove = 0;\n                for(let i = 1; i < possibleNextMoves.length; i++){\n                    const currentValue = possibleNextMoves[i]?.value ?? 0;\n                    const highestValue = possibleNextMoves[indexOfHighestValueMove]?.value ?? 0;\n                    indexOfHighestValueMove = currentValue > highestValue ? i : indexOfHighestValueMove;\n                }\n                allCellArray[indexOfHighestValueMove].click();\n            }\n            function handleCellClick(event) {\n                const cell = event.target;\n                const cellIndex = cell.getAttribute(\"data-cell-index\");\n                board.editBoard(cellIndex, symbol);\n                removeClickEventFromCells(handleCellClick);\n                resolve();\n            }\n        });\n    };\n    return {\n        symbol: symbol,\n        name: name,\n        startTurn: startTurn\n    };\n}\n\n\nconst $4aa1cd84f89e5a94$var$board = (0, $0407224c6b4a60f1$export$2e2bcd8739ae039)();\nlet $4aa1cd84f89e5a94$var$game;\nfunction $4aa1cd84f89e5a94$var$startGame(e) {\n    $4aa1cd84f89e5a94$var$board.reset();\n    console.log(\"game starting\");\n    $4aa1cd84f89e5a94$var$game.start();\n    (0, $ea6e99e5431089c0$export$ee83f511b7056644).style.opacity = \"0\";\n    document.querySelector(\"#winner-text\").textContent = \"\";\n}\nfunction $4aa1cd84f89e5a94$var$intializeGame() {\n    $4aa1cd84f89e5a94$var$game = (0, $48f6c7b0f9ee5bd6$export$2e2bcd8739ae039)((0, $b1962aabaad09aa2$export$2e2bcd8739ae039)(false, \"o\", \"User\", $4aa1cd84f89e5a94$var$board), (0, $b1962aabaad09aa2$export$2e2bcd8739ae039)(true, \"x\", \"Reino\", $4aa1cd84f89e5a94$var$board), $4aa1cd84f89e5a94$var$board);\n    (0, $ea6e99e5431089c0$export$1324d9a85915ed99).style.display = \"grid\";\n}\n(0, $ea6e99e5431089c0$export$ee83f511b7056644).addEventListener(\"click\", $4aa1cd84f89e5a94$var$startGame);\n$4aa1cd84f89e5a94$var$intializeGame();\n\n\n//# sourceMappingURL=index.42a28bf5.js.map\n","import Board from \"./Board.js\";\nimport {\n  gameElements,\n  gameStartBtn,\n} from \"./Elements.js\";\nimport Game from \"./Game.js\";\nimport Player from \"./Player.js\";\nimport { createAllPossiblePolicies } from \"./Policies.js\";\nconst board = Board()\n\nlet game;\n\nfunction startGame(e: Event) {\n  board.reset();\n  console.log(\"game starting\");\n  game.start();\n  gameStartBtn.style.opacity = \"0\";\n  (document.querySelector(\"#winner-text\") as HTMLElement).textContent = \"\";\n}\n\nfunction intializeGame() {\n  game = Game(\n    Player(false, \"o\", \"User\", board),\n    Player(true, \"x\", \"Reino\", board),\n    board\n  );\n  gameElements.style.display = \"grid\";\n}\n\ngameStartBtn.addEventListener(\"click\", startGame);\nintializeGame();\n","export default function Board() {\n  const gameBoard = [\n    \"empty\",\n    \"empty\",\n    \"empty\",\n    \"empty\",\n    \"empty\",\n    \"empty\",\n    \"empty\",\n    \"empty\",\n    \"empty\",\n  ];\n\n  const getCell = (index) => {\n    return document.querySelector(`.cell[data-cell-index='${index}']`);\n  };\n\n  const isFilled = () => !gameBoard.includes(\"empty\");\n\n  const drawBoard = () => {\n    gameBoard.forEach((marking, index) => {\n      if (marking === \"o\") {\n        getCell(index).classList.add(\"o\");\n      } else if (marking === \"x\") {\n        getCell(index).classList.add(\"x\");\n      } else if (marking === \"empty\") {\n        getCell(index).classList.remove(\"x\");\n        getCell(index).classList.remove(\"o\");\n      }\n    });\n  };\n\n  const isWinner = (symbol) => {\n    const check = (index) => gameBoard[index] === symbol;\n    const firstColCheck = check(0) && check(3) && check(6);\n    const secondColCheck = check(1) && check(4) && check(7);\n    const thirdColCheck = check(2) && check(5) && check(8);\n    const firstRowCheck = check(0) && check(1) && check(2);\n    const secondRowCheck = check(3) && check(4) && check(5);\n    const thirdRowCheck = check(6) && check(7) && check(8);\n    const firstDiagCheck = check(0) && check(4) && check(8);\n    const secondDiagCheck = check(2) && check(4) && check(6);\n    return (\n      firstColCheck ||\n      secondColCheck ||\n      thirdColCheck ||\n      firstRowCheck ||\n      secondRowCheck ||\n      thirdRowCheck ||\n      firstDiagCheck ||\n      secondDiagCheck\n    );\n  };\n\n  let lastEditedIndex: number | null = null;\n  const getLastEditedIndex = () => lastEditedIndex;\n\n  const editBoard = (index, symbol) => {\n    gameBoard[index] = symbol;\n    lastEditedIndex = index;\n    drawBoard();\n  };\n\n  const reset = () => {\n    gameBoard.fill(\"empty\");\n    drawBoard();\n  };\n\n  return { isWinner, isFilled, editBoard, reset, getLastEditedIndex, gameBoard };\n};\n\nexport type BoardType = ReturnType<typeof Board>;\n","function querySelectorWithError(query: string) {\n  const queryResult = document.querySelectorAll(query);\n\n  if (queryResult.length > 1) {\n    throw new Error(\"Multiple elements detected\")\n  }\n\n  if (queryResult.length < 1) {\n    throw new Error(\"No elements detected, is the js file deferred?\")\n  }\n\n  return queryResult[0]\n}\n\nexport const  gameElements = querySelectorWithError('#game-elements') as HTMLElement\nexport const  winnerText = querySelectorWithError('#winner-text') as HTMLElement\nexport const  gameStartBtn = querySelectorWithError('#start-game') as HTMLElement\nexport const  currentPlayerTurn = querySelectorWithError(\"#current-player-turn\") as HTMLInputElement\n","import { BoardType } from \"./Board\";\nimport { currentPlayerTurn, winnerText } from \"./Elements.js\";\nimport { PlayerType } from \"./Player\";\nimport { Policy, createAllPossiblePolicies } from \"./Policies\";\n\nexport default function Game(oPlayer: PlayerType, xPlayer: PlayerType, board: BoardType) {\n  const isGameDone = () =>\n    board.isWinner(oPlayer.symbol) ||\n    board.isWinner(xPlayer.symbol) ||\n    board.isFilled();\n\n  async function playerTurn(player: PlayerType, policy: Policy) {\n    currentPlayerTurn.textContent = `It's your turn, ${player.name}`\n    await player.startTurn(policy, board);\n    currentPlayerTurn.textContent = ''\n  }\n\n  let originalPolicy = createAllPossiblePolicies();\n\n  // reino is x player\n  const start = async () => {\n    let currentPolicy = originalPolicy;\n    while (true) {\n      await playerTurn(oPlayer, currentPolicy)\n\n      let previousPolicy = currentPolicy;\n      currentPolicy = currentPolicy.possibleMoves[board.getLastEditedIndex()];\n      updatePolicy(currentPolicy, previousPolicy);\n\n      if (isGameDone()) {\n        break;\n      }\n      await playerTurn(xPlayer, currentPolicy)\n      previousPolicy = currentPolicy;\n      currentPolicy = currentPolicy.possibleMoves[board.getLastEditedIndex()];\n      updatePolicy(currentPolicy, previousPolicy);\n\n      if (isGameDone()) {\n        break;\n      }\n    }\n\n    winnerText.style.display = \"block\";\n    if (board.isWinner(oPlayer.symbol)) {\n      winnerText.innerHTML = `${oPlayer.name} has won`;\n    } else if (board.isWinner(xPlayer.symbol)) {\n      winnerText.innerHTML = `${xPlayer.name} has won`;\n    } else if (board.isFilled()) {\n      winnerText.innerHTML = \"TIE!\";\n    }\n    (document.querySelector(\"#start-game\") as HTMLElement).style.opacity = \"1\";\n  };\n  return { start };\n\n  // equation on page 10 of rl by barto and sutton second edition: V(S_t) <- V(S_t) + a[V(S_t+1) - V(S_t)]\n  function updatePolicy(currentPolicy: Policy, previousPolicy: Policy) {\n    const stepSizeParameter = 1;\n    previousPolicy.value = previousPolicy.value + stepSizeParameter*(currentPolicy.value - previousPolicy.value);\n  }\n};\n","type possibleBoardStates = \"empty\" | \"o\" | \"x\"\ntype BoardState = [ possibleBoardStates, possibleBoardStates, possibleBoardStates, possibleBoardStates, possibleBoardStates, possibleBoardStates, possibleBoardStates, possibleBoardStates, possibleBoardStates ]\n\n// @ts-ignore\nfunction Policy(state: BoardState, value: number, possibleMoves: ReturnType<typeof Policy>[]) {\n  return {\n    state,\n    value,\n    possibleMoves: possibleMoves as ReturnType<typeof Policy>[]\n  }\n}\n\nexport type Policy = ReturnType<typeof Policy>\n\n// assume Reino always goes second and is x\nexport function createAllPossiblePolicies() {\n  const initialPolicy = Policy(createEmptyBoardState(), 0, []);\n\n  function addPolicy(turnSymbol: possibleBoardStates, policy: Policy) {\n    const newPolicyState = createCopy(policy.state)\n    for (let i = 0; i < 9; i++) {\n      if (policy.state[i] === 'empty') {\n        newPolicyState[i] = turnSymbol;\n\n        const newPolicy = Policy(createCopy(newPolicyState), 0, []);\n\n        const xWinning = isWinner(newPolicyState, 'x');\n        const oWinning = isWinner(newPolicyState, 'o');\n\n        if (xWinning) {\n          newPolicy.value = 1;\n        } else if (oWinning) {\n          newPolicy.value = 0;\n        } else {\n          newPolicy.value = 0.5;\n        }\n\n        policy.possibleMoves.push(newPolicy);\n\n        const notAWinner = !(xWinning || oWinning);\n        if (notAWinner) {\n          addPolicy(turnSymbol === 'x' ? 'o' : 'x', newPolicy);\n        }\n\n        newPolicyState[i] = 'empty';\n      } else {\n        policy.possibleMoves.push(null);\n      }\n    }\n  }\n\n  addPolicy('o', initialPolicy);\n  return initialPolicy;\n\n  function createCopy(boardState: BoardState): BoardState {\n    return [\n      boardState[0],\n      boardState[1],\n      boardState[2],\n      boardState[3],\n      boardState[4],\n      boardState[5],\n      boardState[6],\n      boardState[7],\n      boardState[8],\n    ]\n  }\n\n  function isWinner(boardState: BoardState, symbol: possibleBoardStates) {\n    const check = (i) => boardState[i] === symbol;\n    const firstColCheck = check(0) && check(3) && check(6);\n    const secondColCheck = check(1) && check(4) && check(7);\n    const thirdColCheck = check(2) && check(5) && check(8);\n    const firstRowCheck = check(0) && check(1) && check(2);\n    const secondRowCheck = check(3) && check(4) && check(5);\n    const thirdRowCheck = check(6) && check(7) && check(8);\n    const firstDiagCheck = check(0) && check(4) && check(8);\n    const secondDiagCheck = check(2) && check(4) && check(6);\n    return (\n      firstColCheck ||\n      secondColCheck ||\n      thirdColCheck ||\n      firstRowCheck ||\n      secondRowCheck ||\n      thirdRowCheck ||\n      firstDiagCheck ||\n      secondDiagCheck\n    );\n  }\n}\n\nfunction createEmptyBoardState(): BoardState {\n  return [\n    'empty',\n    'empty',\n    'empty',\n    'empty',\n    'empty',\n    'empty',\n    'empty',\n    'empty',\n    'empty',\n  ]\n}\n","import { BoardType } from \"./Board\";\nimport { Policy } from \"./Policies\";\n\nexport default function Player(isAi: boolean, symbol: 'o' | 'x', name, board: BoardType) {\n  const getEmptyCellArray = (): HTMLElement[] => [\n    ...document.querySelectorAll(\".cell:not(.x):not(.o)\"),\n  ] as HTMLElement[];\n\n  const getAllCellsArray = () => [\n    ...document.querySelectorAll(\".cell\"),\n  ] as HTMLElement[];\n\n  function addClickEventToEmptyCells(clickEvent: EventListener) {\n    getEmptyCellArray().forEach((cell) => {\n      cell.addEventListener(\"click\", clickEvent);\n    });\n  }\n\n  function removeClickEventFromCells(clickEvent: EventListener) {\n    getAllCellsArray().forEach((e) =>\n      e.removeEventListener(\"click\", clickEvent)\n    );\n  }\n\n  const startTurn = async (policy: Policy, board: BoardType) => {\n    return new Promise<void>((resolve) => {\n      addClickEventToEmptyCells(handleCellClick)\n      if (isAi) {\n        const allCellArray = getAllCellsArray();\n        const possibleNextMoves: Policy[] = policy.possibleMoves;\n\n        let indexOfHighestValueMove: number = 0;\n        for (let i = 1; i < possibleNextMoves.length; i++) {\n          const currentValue = possibleNextMoves[i]?.value ?? 0;\n          const highestValue = possibleNextMoves[indexOfHighestValueMove]?.value ?? 0;\n          indexOfHighestValueMove = currentValue > highestValue ? i : indexOfHighestValueMove;\n        }\n\n        allCellArray[indexOfHighestValueMove].click();\n      }\n\n      function handleCellClick(event: Event) {\n        const cell = event.target as HTMLElement\n        const cellIndex = cell.getAttribute(\"data-cell-index\")\n        board.editBoard(cellIndex, symbol)\n        removeClickEventFromCells(handleCellClick)\n        resolve();\n      }\n    })\n  };\n  return { symbol, name, startTurn };\n}\n\nexport type PlayerType = ReturnType<typeof Player>;\n"],"names":["$4aa1cd84f89e5a94$var$game","$ea6e99e5431089c0$var$querySelectorWithError","query","queryResult","document","querySelectorAll","length","Error","$ea6e99e5431089c0$export$1324d9a85915ed99","$ea6e99e5431089c0$export$82e711826dc223fa","$ea6e99e5431089c0$export$ee83f511b7056644","$ea6e99e5431089c0$export$ee3b447756b3ac63","$8f46985b0731233e$var$Policy","state","value","possibleMoves","$b1962aabaad09aa2$export$2e2bcd8739ae039","isAi","symbol","name","board","getEmptyCellArray","getAllCellsArray","startTurn","policy","Promise","resolve","clickEvent","handleCellClick","event","cell","target","cellIndex","getAttribute","editBoard","forEach","e","removeEventListener","addEventListener","allCellArray","possibleNextMoves","indexOfHighestValueMove","i","currentValue","highestValue","click","$4aa1cd84f89e5a94$var$board","gameBoard","getCell","index","querySelector","drawBoard","marking","classList","add","remove","lastEditedIndex","isWinner","check","firstColCheck","secondColCheck","thirdColCheck","firstRowCheck","secondRowCheck","thirdRowCheck","firstDiagCheck","secondDiagCheck","isFilled","includes","reset","fill","getLastEditedIndex","console","log","start","style","opacity","textContent","oPlayer","xPlayer","isGameDone","playerTurn","player","originalPolicy","initialPolicy","addPolicy","turnSymbol","newPolicyState","createCopy","newPolicy","xWinning","oWinning","push","notAWinner","boardState","currentPolicy","previousPolicy","updatePolicy","display","innerHTML","stepSizeParameter"],"version":3,"file":"index.42a28bf5.js.map"}